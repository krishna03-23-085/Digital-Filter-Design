//=============================
// 3-Tap FIR Filter Design
//=============================
module fir_filter (
    input clk,
    input reset,
    input signed [7:0] x_in,      // 8-bit input sample
    output reg signed [15:0] y_out // 16-bit output
);

    // Example low-pass filter coefficients (h0=1, h1=2, h2=1)
    parameter signed [7:0] h0 = 8'd1;
    parameter signed [7:0] h1 = 8'd2;
    parameter signed [7:0] h2 = 8'd1;

    // Shift registers for input samples
    reg signed [7:0] x_reg1, x_reg2;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            x_reg1 <= 0;
            x_reg2 <= 0;
            y_out  <= 0;
        end else begin
            // Shift inputs
            x_reg2 <= x_reg1;
            x_reg1 <= x_in;

            // FIR calculation: y[n] = h0*x[n] + h1*x[n-1] + h2*x[n-2]
            y_out <= (h0 * x_in) + (h1 * x_reg1) + (h2 * x_reg2);
        end
    end

endmodule
